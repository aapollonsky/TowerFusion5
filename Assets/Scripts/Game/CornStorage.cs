using UnityEngine;
using System;

namespace TowerFusion
{
    /// <summary>
    /// Represents the corn storage that enemies try to steal from
    /// </summary>
    public class CornStorage : MonoBehaviour
    {
        [Header("Corn Configuration")]
        [SerializeField] private int initialCornCount = 20;
        [SerializeField] private float grabRadius = 1f; // How close enemy must be to grab
        
        [Header("Visual Feedback")]
        [SerializeField] private GameObject cornPilePrefab;
        [SerializeField] private Transform cornVisualParent;
        [SerializeField] private Color visualColor = new Color(1f, 0.8f, 0f); // Golden yellow
        
        private int currentCornCount;
        private Vector3 storagePosition;
        private GameObject autoCreatedVisual;
        
        // Properties
        public Vector3 Position => storagePosition;
        public int CornCount => currentCornCount;
        public bool HasCorn => currentCornCount > 0;
        public float GrabRadius => grabRadius;
        public int InitialCornCount => initialCornCount;
        
        // Events
        public event Action<int> OnCornTaken;      // Passes remaining count
        public event Action<int> OnCornReturned;   // Passes remaining count
        public event Action OnAllCornStolen;
        
        private void Awake()
        {
            storagePosition = transform.position;
            currentCornCount = initialCornCount;
        }
        
        private void Start()
        {
            CreateVisualIfNeeded();
            UpdateVisuals();
        }
        
        /// <summary>
        /// Create a basic visual if no prefab or parent is assigned
        /// </summary>
        private void CreateVisualIfNeeded()
        {
            // If already have a visual setup, don't create auto visual
            if (cornPilePrefab != null || cornVisualParent != null)
                return;
            
            // Create a simple cylinder to represent corn pile
            autoCreatedVisual = GameObject.CreatePrimitive(PrimitiveType.Cylinder);
            autoCreatedVisual.name = "CornPile_AutoGenerated";
            autoCreatedVisual.transform.SetParent(transform);
            autoCreatedVisual.transform.localPosition = Vector3.zero;
            autoCreatedVisual.transform.localScale = new Vector3(1.5f, 1f, 1.5f);
            
            // Set color
            Renderer renderer = autoCreatedVisual.GetComponent<Renderer>();
            if (renderer != null)
            {
                renderer.material = new Material(Shader.Find("Universal Render Pipeline/Lit"));
                renderer.material.color = visualColor;
            }
            
            // Remove collider to avoid interfering with gameplay
            Collider col = autoCreatedVisual.GetComponent<Collider>();
            if (col != null)
                Destroy(col);
            
            // Set this as our visual parent
            cornVisualParent = autoCreatedVisual.transform;
            
            Debug.Log("[CornStorage] Created auto-generated corn pile visual");
        }
        
        /// <summary>
        /// Attempt to take one corn from storage
        /// </summary>
        public bool TakeCorn(Enemy thief)
        {
            if (!HasCorn)
            {
                Debug.LogWarning($"{thief.name} tried to take corn but storage is empty!");
                return false;
            }
            
            currentCornCount--;
            Debug.Log($"{thief.name} stole corn! Remaining: {currentCornCount}/{initialCornCount}");
            
            OnCornTaken?.Invoke(currentCornCount);
            
            if (currentCornCount == 0)
            {
                Debug.LogWarning("All corn has been taken from storage!");
                OnAllCornStolen?.Invoke();
            }
            
            UpdateVisuals();
            return true;
        }
        
        /// <summary>
        /// Return one corn to storage (when carrier dies)
        /// </summary>
        public void ReturnCorn()
        {
            currentCornCount++;
            Debug.Log($"Corn returned to storage! Now: {currentCornCount}/{initialCornCount}");
            
            OnCornReturned?.Invoke(currentCornCount);
            UpdateVisuals();
        }
        
        /// <summary>
        /// Check if enemy is close enough to grab corn
        /// </summary>
        public bool IsInGrabRange(Vector3 enemyPosition)
        {
            return Vector3.Distance(storagePosition, enemyPosition) <= grabRadius;
        }
        
        /// <summary>
        /// Update visual representation based on corn count
        /// </summary>
        private void UpdateVisuals()
        {
            if (cornVisualParent == null)
                return;
            
            // Simple approach: Scale the corn pile based on remaining corn
            float scalePercent = (float)currentCornCount / initialCornCount;
            cornVisualParent.localScale = Vector3.one * Mathf.Max(0.3f, scalePercent);
            
            // Alternative: Could instantiate individual corn objects
            // For now, simple scaling is sufficient
        }
        
        /// <summary>
        /// Reset storage to initial state (for wave restart)
        /// </summary>
        public void ResetStorage()
        {
            currentCornCount = initialCornCount;
            UpdateVisuals();
            Debug.Log($"Corn storage reset to {initialCornCount} corn");
        }
        
        private void OnDestroy()
        {
            // Clean up auto-created visual
            if (autoCreatedVisual != null)
            {
                Destroy(autoCreatedVisual);
            }
        }
        
        private void OnDrawGizmos()
        {
            // Visualize grab radius in editor
            Gizmos.color = Color.yellow;
            Gizmos.DrawWireSphere(transform.position, grabRadius);
            
            // Draw label
            #if UNITY_EDITOR
            UnityEditor.Handles.Label(
                transform.position + Vector3.up * 2f,
                $"Corn Storage\n{(Application.isPlaying ? $"{currentCornCount}/{initialCornCount}" : $"{initialCornCount} corn")}"
            );
            #endif
        }
    }
}
